
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  avgRating: 'avgRating',
  ratingCount: 'ratingCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  email: 'email',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  uniqueDeliveryId: 'uniqueDeliveryId',
  deviceToken: 'deviceToken',
  phoneNumber: 'phoneNumber',
  phoneVerified: 'phoneVerified',
  identityVerified: 'identityVerified',
  bvnVerified: 'bvnVerified',
  businessVerified: 'businessVerified',
  webAccessGranted: 'webAccessGranted',
  webAccessGrantedAt: 'webAccessGrantedAt',
  migratedToVendor: 'migratedToVendor',
  migrationDate: 'migrationDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  inviteCode: 'inviteCode',
  publicKey: 'publicKey',
  address: 'address',
  avatar: 'avatar',
  emailVerified: 'emailVerified',
  password: 'password',
  isSocialAccount: 'isSocialAccount',
  socialAccountProvider: 'socialAccountProvider',
  notificationsEnabled: 'notificationsEnabled',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  notificationPreference: 'notificationPreference',
  savedMeterNumbers: 'savedMeterNumbers',
  isSuspended: 'isSuspended',
  suspendedAt: 'suspendedAt',
  deletionRequestedAt: 'deletionRequestedAt',
  deletedAt: 'deletedAt',
  isWithdrawalSuspended: 'isWithdrawalSuspended',
  withdrawalSuspendedAt: 'withdrawalSuspendedAt',
  withdrawalSuspensionReason: 'withdrawalSuspensionReason',
  withdrawalSuspensionDuration: 'withdrawalSuspensionDuration',
  gender: 'gender',
  dateOfBirth: 'dateOfBirth',
  pushToken: 'pushToken',
  lastLoginAt: 'lastLoginAt',
  isWithdrawalAllowed: 'isWithdrawalAllowed',
  isDeliveryAgent: 'isDeliveryAgent',
  isAdmin: 'isAdmin',
  isVendor: 'isVendor',
  status: 'status',
  banReason: 'banReason',
  blocked: 'blocked',
  isPenalized: 'isPenalized'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  status: 'status',
  isWebEnabled: 'isWebEnabled',
  webEnabledAt: 'webEnabledAt',
  department: 'department',
  jobTitle: 'jobTitle',
  permissions: 'permissions',
  vehicleType: 'vehicleType',
  vehiclePlate: 'vehiclePlate',
  lastLocationLat: 'lastLocationLat',
  lastLocationLng: 'lastLocationLng',
  lastLocationAt: 'lastLocationAt',
  vendorId: 'vendorId',
  defaultDeliveryFee: 'defaultDeliveryFee',
  roleSpecificData: 'roleSpecificData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  profileId: 'profileId',
  businessVerificationStatus: 'businessVerificationStatus',
  identityVerificationStatus: 'identityVerificationStatus',
  serviceVerificationStatus: 'serviceVerificationStatus',
  walletBalance: 'walletBalance',
  avatar: 'avatar',
  deliveries: 'deliveries',
  rating: 'rating',
  yearsOnPlatform: 'yearsOnPlatform',
  achievements: 'achievements',
  fiveStarRatingsCount: 'fiveStarRatingsCount',
  avgRating: 'avgRating',
  ratingCount: 'ratingCount',
  fiveStarCount: 'fiveStarCount'
};

exports.Prisma.ZoneScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  name: 'name',
  minDeliveryDays: 'minDeliveryDays',
  maxDeliveryDays: 'maxDeliveryDays',
  orderCutoffTime: 'orderCutoffTime',
  status: 'status',
  providerId: 'providerId',
  providerRole: 'providerRole',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  serviceRadius: 'serviceRadius',
  priceMultiplier: 'priceMultiplier',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComplaintScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  serviceOrderId: 'serviceOrderId',
  productId: 'productId',
  serviceId: 'serviceId',
  userId: 'userId',
  issueType: 'issueType',
  description: 'description',
  reason: 'reason',
  status: 'status',
  internalNote: 'internalNote',
  resolutionDetails: 'resolutionDetails',
  assignedTeamId: 'assignedTeamId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt',
  images: 'images',
  ticketId: 'ticketId'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileId: 'profileId',
  roleId: 'roleId',
  customRole: 'customRole',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  metadata: 'metadata'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pushEnabled: 'pushEnabled',
  emailEnabled: 'emailEnabled',
  smsEnabled: 'smsEnabled',
  discountsEnabled: 'discountsEnabled',
  passwordChangeEnabled: 'passwordChangeEnabled',
  notificationTypes: 'notificationTypes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IdentityVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileId: 'profileId',
  documentType: 'documentType',
  country: 'country',
  frontImageUrl: 'frontImageUrl',
  backImageUrl: 'backImageUrl',
  selfieImageUrl: 'selfieImageUrl',
  status: 'status',
  reviewedById: 'reviewedById',
  reviewedAt: 'reviewedAt',
  rejectionReason: 'rejectionReason',
  submittedAt: 'submittedAt',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deviceInfo: 'deviceInfo',
  documentNumber: 'documentNumber'
};

exports.Prisma.IdentityVerificationStatusHistoryScalarFieldEnum = {
  id: 'id',
  verificationId: 'verificationId',
  status: 'status',
  updatedById: 'updatedById',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.LicenseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  licenseType: 'licenseType',
  licenseNumber: 'licenseNumber',
  issuedBy: 'issuedBy',
  issuedDate: 'issuedDate',
  expiryDate: 'expiryDate',
  documentUrl: 'documentUrl',
  documentBackUrl: 'documentBackUrl',
  documentType: 'documentType',
  verified: 'verified',
  status: 'status',
  verifiedAt: 'verifiedAt',
  rejectionReason: 'rejectionReason',
  verifiedById: 'verifiedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  urlStatuses: 'urlStatuses'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  plateNumberUrl: 'plateNumberUrl',
  driverLicenseUrl: 'driverLicenseUrl',
  vehicleRoadLicenseUrl: 'vehicleRoadLicenseUrl',
  verified: 'verified',
  status: 'status',
  verifiedAt: 'verifiedAt',
  rejectionReason: 'rejectionReason',
  documentType: 'documentType',
  verifiedById: 'verifiedById',
  plateNumber: 'plateNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  urlStatuses: 'urlStatuses'
};

exports.Prisma.VendorWalletConfigScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  deliveryAgentId: 'deliveryAgentId',
  withdrawalEnabled: 'withdrawalEnabled',
  depositEnabled: 'depositEnabled',
  withdrawalLimit: 'withdrawalLimit',
  depositRequiresApproval: 'depositRequiresApproval',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  virtualAccount1Id: 'virtualAccount1Id',
  virtualAccount2Id: 'virtualAccount2Id'
};

exports.Prisma.ServiceTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  categoryId: 'categoryId'
};

exports.Prisma.ServiceOrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agentId: 'agentId',
  serviceId: 'serviceId',
  zoneId: 'zoneId',
  vendorId: 'vendorId',
  amountDue: 'amountDue',
  deliveryFee: 'deliveryFee',
  serviceCharge: 'serviceCharge',
  paymentStatus: 'paymentStatus',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentId: 'paymentId',
  deliveryAddressId: 'deliveryAddressId',
  latitude: 'latitude',
  longitude: 'longitude',
  countryId: 'countryId',
  stateId: 'stateId',
  cityId: 'cityId',
  virtualAccountId: 'virtualAccountId',
  adminId: 'adminId',
  orderQuantity: 'orderQuantity',
  deliveryDistance: 'deliveryDistance',
  customerReference: 'customerReference',
  paymentMethod: 'paymentMethod',
  deliveryLatitude: 'deliveryLatitude',
  deliveryLongitude: 'deliveryLongitude',
  confirmationCode: 'confirmationCode',
  voucherId: 'voucherId',
  deliveryTime: 'deliveryTime',
  billerCode: 'billerCode',
  itemCode: 'itemCode',
  meterNumber: 'meterNumber',
  paymentDetails: 'paymentDetails',
  meterType: 'meterType',
  token: 'token',
  serviceFee: 'serviceFee',
  voucherDiscount: 'voucherDiscount',
  pointsDiscount: 'pointsDiscount',
  flutterwaveFee: 'flutterwaveFee',
  monnifyFee: 'monnifyFee',
  vat: 'vat',
  transactionRef: 'transactionRef',
  serviceTypeId: 'serviceTypeId'
};

exports.Prisma.ServiceOrderStatusHistoryScalarFieldEnum = {
  id: 'id',
  serviceOrderId: 'serviceOrderId',
  status: 'status',
  updatedBy: 'updatedBy',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.BVNVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  walletId: 'walletId',
  bvn: 'bvn',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  status: 'status',
  responseDetails: 'responseDetails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  transactionRef: 'transactionRef'
};

exports.Prisma.AccessoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  stockCount: 'stockCount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServicesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  serviceTypeId: 'serviceTypeId',
  status: 'status',
  isActive: 'isActive',
  pricePerUnit: 'pricePerUnit',
  deliveryCost: 'deliveryCost',
  minimumOrder: 'minimumOrder',
  maximumOrder: 'maximumOrder',
  paymentOptions: 'paymentOptions',
  Contact: 'Contact',
  businessHours: 'businessHours',
  expectedDeliveryTime: 'expectedDeliveryTime',
  address: 'address',
  logoUrl: 'logoUrl',
  longitude: 'longitude',
  latitude: 'latitude',
  serviceRadius: 'serviceRadius',
  countryId: 'countryId',
  stateId: 'stateId',
  cityId: 'cityId',
  lgaId: 'lgaId',
  providerId: 'providerId',
  providerRole: 'providerRole',
  businessVerificationId: 'businessVerificationId',
  deliveryRepId: 'deliveryRepId',
  agentId: 'agentId',
  verified: 'verified',
  verifiedAt: 'verifiedAt',
  verificationStatus: 'verificationStatus',
  avgRating: 'avgRating',
  ratingCount: 'ratingCount',
  billerCode: 'billerCode',
  itemCode: 'itemCode',
  destinationBankCode: 'destinationBankCode',
  destinationAccountNumber: 'destinationAccountNumber',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  businessName: 'businessName'
};

exports.Prisma.ServiceReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  reviewerName: 'reviewerName',
  reviewerId: 'reviewerId',
  serviceId: 'serviceId',
  createdAt: 'createdAt'
};

exports.Prisma.BusinessVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileId: 'profileId',
  businessName: 'businessName',
  rcNumber: 'rcNumber',
  businessAddress: 'businessAddress',
  tinNumber: 'tinNumber',
  cacDocumentUrl: 'cacDocumentUrl',
  tinDocumentUrl: 'tinDocumentUrl',
  proofOfAddressUrl: 'proofOfAddressUrl',
  logoUrl: 'logoUrl',
  handles: 'handles',
  status: 'status',
  documentType: 'documentType',
  rejectionReason: 'rejectionReason',
  adminId: 'adminId',
  submittedAt: 'submittedAt',
  processedAt: 'processedAt',
  urlStatuses: 'urlStatuses'
};

exports.Prisma.ProductOrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  vendorId: 'vendorId',
  deliveryAddressId: 'deliveryAddressId',
  agentId: 'agentId',
  subtotal: 'subtotal',
  deliveryFee: 'deliveryFee',
  serviceCharge: 'serviceCharge',
  vatAmount: 'vatAmount',
  total: 'total',
  confirmationCode: 'confirmationCode',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  orderStatus: 'orderStatus',
  deliveryRepId: 'deliveryRepId',
  countryId: 'countryId',
  stateId: 'stateId',
  lgaId: 'lgaId',
  cityId: 'cityId',
  notes: 'notes',
  customerReference: 'customerReference',
  deliveryNotes: 'deliveryNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  deliveryTime: 'deliveryTime',
  deliveryDistance: 'deliveryDistance',
  latitude: 'latitude',
  longitude: 'longitude',
  voucherId: 'voucherId',
  productTypeId: 'productTypeId'
};

exports.Prisma.ServiceVerificationScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  profileId: 'profileId',
  notes: 'notes',
  status: 'status',
  adminId: 'adminId',
  submittedAt: 'submittedAt',
  processedAt: 'processedAt',
  userId: 'userId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  createdAt: 'createdAt',
  notes: 'notes',
  entityType: 'entityType',
  entityId: 'entityId',
  investigationStatus: 'investigationStatus',
  investigatedBy: 'investigatedBy',
  investigatedAt: 'investigatedAt',
  orderId: 'orderId',
  orderAuditLogId: 'orderAuditLogId',
  serviceOrderId: 'serviceOrderId'
};

exports.Prisma.WalletTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  walletId: 'walletId',
  transactionType: 'transactionType',
  amount: 'amount',
  topupCharge: 'topupCharge',
  serviceOrderId: 'serviceOrderId',
  productOrderId: 'productOrderId',
  paymentId: 'paymentId',
  transactionRef: 'transactionRef',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  billerCode: 'billerCode',
  metadata: 'metadata',
  vendorId: 'vendorId'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  code: 'code',
  userId: 'userId',
  expiresAt: 'expiresAt',
  transactionReference: 'transactionReference',
  phoneNumber: 'phoneNumber',
  email: 'email',
  medium: 'medium',
  verified: 'verified',
  attempts: 'attempts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  eventType: 'eventType',
  metadata: 'metadata',
  verifiedAt: 'verifiedAt'
};

exports.Prisma.VoucherScalarFieldEnum = {
  id: 'id',
  code: 'code',
  discount: 'discount',
  type: 'type',
  maxUses: 'maxUses',
  maxUsesPerUser: 'maxUsesPerUser',
  uses: 'uses',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  isActive: 'isActive',
  appliesTo: 'appliesTo',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById'
};

exports.Prisma.VoucherUsageScalarFieldEnum = {
  id: 'id',
  voucherId: 'voucherId',
  userId: 'userId',
  usedAt: 'usedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  entityType: 'entityType',
  entityId: 'entityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransferScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  transactionId: 'transactionId',
  status: 'status',
  proofOfPayment: 'proofOfPayment',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerAddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  address: 'address',
  state: 'state',
  latitude: 'latitude',
  longitude: 'longitude',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subAccountCode: 'subAccountCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  giverId: 'giverId',
  giverRoleId: 'giverRoleId',
  receiverId: 'receiverId',
  receiverRoleId: 'receiverRoleId',
  comment: 'comment',
  rating: 'rating',
  status: 'status',
  priority: 'priority',
  issueType: 'issueType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt',
  agentProfileId: 'agentProfileId',
  vendorId: 'vendorId',
  orderId: 'orderId',
  serviceOrderId: 'serviceOrderId',
  customerId: 'customerId'
};

exports.Prisma.OrderReviewScalarFieldEnum = {
  id: 'id',
  comment: 'comment',
  orderId: 'orderId',
  serviceOrderId: 'serviceOrderId',
  serviceId: 'serviceId',
  userId: 'userId',
  rating: 'rating',
  createdAt: 'createdAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metadata: 'metadata'
};

exports.Prisma.PayOnDeliveryOrderScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  serviceOrderId: 'serviceOrderId',
  phoneNumber: 'phoneNumber',
  amountDue: 'amountDue',
  status: 'status',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  transactionRef: 'transactionRef',
  flwRef: 'flwRef',
  monnifyRef: 'monnifyRef',
  productType: 'productType',
  serviceType: 'serviceType',
  billerCode: 'billerCode',
  serviceOrderId: 'serviceOrderId',
  meterNumber: 'meterNumber',
  paymentLink: 'paymentLink',
  amount: 'amount',
  requestedAmount: 'requestedAmount',
  topupCharge: 'topupCharge',
  status: 'status',
  paymentMethod: 'paymentMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentDetails: 'paymentDetails',
  providerId: 'providerId',
  orderId: 'orderId'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  adminId: 'adminId',
  category: 'category',
  details: 'details',
  imageUrl: 'imageUrl',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt',
  agentProfileId: 'agentProfileId',
  vendorId: 'vendorId',
  reporterName: 'reporterName',
  reporterPhone: 'reporterPhone',
  serviceOrderId: 'serviceOrderId',
  productOrderId: 'productOrderId',
  documentId: 'documentId'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  totalTopupCharge: 'totalTopupCharge',
  vendorLinkedAccount1: 'vendorLinkedAccount1',
  vendorLinkedAccount2: 'vendorLinkedAccount2',
  vendorBankName: 'vendorBankName',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accountNumber: 'accountNumber'
};

exports.Prisma.PaymentProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  flutterwave_biller_code: 'flutterwave_biller_code',
  providerKey: 'providerKey',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  active: 'active',
  images: 'images',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  salePrice: 'salePrice',
  imageUrl: 'imageUrl',
  images: 'images',
  brand: 'brand',
  size: 'size',
  stock: 'stock',
  status: 'status',
  featured: 'featured',
  productTypeId: 'productTypeId',
  categoryId: 'categoryId',
  productOwnerId: 'productOwnerId',
  rating: 'rating',
  orderCount: 'orderCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactOptionScalarFieldEnum = {
  id: 'id',
  method: 'method',
  details: 'details',
  responseTime: 'responseTime',
  businessHours: 'businessHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InfractionScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  deliveryRepId: 'deliveryRepId',
  vendorId: 'vendorId',
  type: 'type',
  reason: 'reason',
  issuedAt: 'issuedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  accessoryId: 'accessoryId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentConfigScalarFieldEnum = {
  id: 'id',
  paymentMethod: 'paymentMethod',
  isEnabled: 'isEnabled',
  gateway: 'gateway',
  publicKey: 'publicKey',
  secretKey: 'secretKey',
  contractCode: 'contractCode',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  serviceOrderId: 'serviceOrderId',
  productId: 'productId',
  serviceId: 'serviceId',
  reason: 'reason',
  riskFactors: 'riskFactors',
  internalNotes: 'internalNotes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WithdrawalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  walletId: 'walletId',
  amount: 'amount',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deliveryRepId: 'deliveryRepId',
  vendorId: 'vendorId',
  processedAt: 'processedAt',
  transactionRef: 'transactionRef',
  isAccountValidated: 'isAccountValidated',
  validatedBy: 'validatedBy',
  validationDate: 'validationDate',
  bvnVerified: 'bvnVerified'
};

exports.Prisma.WithdrawalLimitScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  limitType: 'limitType',
  limitValue: 'limitValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.QuicrifillWalletScalarFieldEnum = {
  id: 'id',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuicrifillWithdrawalScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  amount: 'amount',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  processedAt: 'processedAt',
  transactionRef: 'transactionRef',
  requestedBy: 'requestedBy'
};

exports.Prisma.AppInstallationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceType: 'deviceType',
  deviceId: 'deviceId',
  deviceToken: 'deviceToken',
  isRecognized: 'isRecognized',
  recognizedAt: 'recognizedAt',
  isBanned: 'isBanned',
  bannedAt: 'bannedAt',
  banReason: 'banReason',
  createdAt: 'createdAt',
  blocked: 'blocked',
  isSuspended: 'isSuspended',
  isPenalized: 'isPenalized'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  status: 'status',
  restrictions: 'restrictions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  countryId: 'countryId',
  status: 'status',
  restrictions: 'restrictions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  lgaId: 'lgaId',
  stateId: 'stateId',
  status: 'status',
  restrictions: 'restrictions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LgaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  stateId: 'stateId',
  status: 'status',
  restrictions: 'restrictions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VirtualAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  walletId: 'walletId',
  vendorId: 'vendorId',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  status: 'status',
  monnifyRef: 'monnifyRef',
  isVendorMain: 'isVendorMain',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FraudAlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  entityId: 'entityId',
  entityType: 'entityType',
  reason: 'reason',
  userId: 'userId',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  resolvedAt: 'resolvedAt',
  status: 'status'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  htmlContent: 'htmlContent',
  eventTypeId: 'eventTypeId',
  updatedBy: 'updatedBy',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.RolePrivilegeScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  privileges: 'privileges',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrashReportScalarFieldEnum = {
  id: 'id',
  appVersion: 'appVersion',
  deviceType: 'deviceType',
  deviceModel: 'deviceModel',
  osVersion: 'osVersion',
  errorMessage: 'errorMessage',
  stackTrace: 'stackTrace',
  userId: 'userId',
  status: 'status',
  reportedAt: 'reportedAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt',
  deviceId: 'deviceId',
  metadata: 'metadata'
};

exports.Prisma.AccountDeletionRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  reason: 'reason',
  additionalComments: 'additionalComments',
  status: 'status',
  requestedAt: 'requestedAt',
  scheduledDeletionAt: 'scheduledDeletionAt',
  reviewedAt: 'reviewedAt',
  reviewedById: 'reviewedById',
  rejectionReason: 'rejectionReason',
  adminNotes: 'adminNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminSettingsScalarFieldEnum = {
  id: 'id',
  defaultServiceCharge: 'defaultServiceCharge',
  defaultVatRate: 'defaultVatRate',
  defaultTopupCharge: 'defaultTopupCharge',
  defaultPetroleumTaxRate: 'defaultPetroleumTaxRate',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppealScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  vendorId: 'vendorId',
  reason: 'reason',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  walletId: 'walletId',
  isDeliveryWithdrawalEnabled: 'isDeliveryWithdrawalEnabled',
  withdrawalLimitDaily: 'withdrawalLimitDaily',
  withdrawalLimitSingle: 'withdrawalLimitSingle',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankCardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  walletId: 'walletId',
  profileId: 'profileId',
  cardLast4: 'cardLast4',
  cardType: 'cardType',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  bankCode: 'bankCode',
  expiryDate: 'expiryDate',
  isValidated: 'isValidated',
  flutterwaveToken: 'flutterwaveToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderStatusHistoryScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  serviceOrderId: 'serviceOrderId',
  entityType: 'entityType',
  status: 'status',
  createdAt: 'createdAt',
  updatedBy: 'updatedBy',
  notes: 'notes'
};

exports.Prisma.WebhookAttemptScalarFieldEnum = {
  id: 'id',
  walletTransactionId: 'walletTransactionId',
  eventType: 'eventType',
  webhookUrl: 'webhookUrl',
  payload: 'payload',
  status: 'status',
  attempts: 'attempts',
  lastAttemptAt: 'lastAttemptAt',
  response: 'response',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SMSTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  content: 'content',
  eventTypeId: 'eventTypeId',
  updatedBy: 'updatedBy',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  vendorId: 'vendorId',
  type: 'type',
  eventTypeId: 'eventTypeId',
  payload: 'payload',
  status: 'status',
  channel: 'channel',
  recipient: 'recipient',
  errorMessage: 'errorMessage',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.PushTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  body: 'body',
  eventTypeId: 'eventTypeId',
  updatedBy: 'updatedBy',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  url: 'url',
  eventTypeId: 'eventTypeId',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailSettingsScalarFieldEnum = {
  id: 'id',
  smtpHost: 'smtpHost',
  smtpPort: 'smtpPort',
  smtpUser: 'smtpUser',
  smtpPassword: 'smtpPassword',
  emailFrom: 'emailFrom',
  enableNotifications: 'enableNotifications',
  deliveryTimeStart: 'deliveryTimeStart',
  deliveryTimeEnd: 'deliveryTimeEnd',
  updatedBy: 'updatedBy',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SMSSettingsScalarFieldEnum = {
  id: 'id',
  enableNotifications: 'enableNotifications',
  senderId: 'senderId',
  deliveryTimeStart: 'deliveryTimeStart',
  deliveryTimeEnd: 'deliveryTimeEnd',
  smsProvider: 'smsProvider',
  serviceType: 'serviceType',
  user: 'user',
  password: 'password',
  host: 'host',
  port: 'port',
  updatedBy: 'updatedBy',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ChurnInsightScalarFieldEnum = {
  id: 'id',
  month: 'month',
  poorCustomerSupport: 'poorCustomerSupport',
  highServiceFees: 'highServiceFees',
  paymentIssues: 'paymentIssues',
  serviceDelays: 'serviceDelays',
  other: 'other',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RewardRuleScalarFieldEnum = {
  id: 'id',
  pointsPerNaira: 'pointsPerNaira',
  nairaPerPoint: 'nairaPerPoint',
  appliesTo: 'appliesTo',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  isActive: 'isActive',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById'
};

exports.Prisma.RewardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  points: 'points',
  source: 'source',
  sourceId: 'sourceId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventTypeRoleScalarFieldEnum = {
  id: 'id',
  eventTypeId: 'eventTypeId',
  roleId: 'roleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SocialAccountProvider = exports.$Enums.SocialAccountProvider = {
  FACEBOOK: 'FACEBOOK',
  GOOGLE: 'GOOGLE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  NEW_ORDER: 'NEW_ORDER',
  ORDER_UPDATE: 'ORDER_UPDATE',
  ORDER_CANCELLED: 'ORDER_CANCELLED',
  FEEDBACK_SUBMITTED: 'FEEDBACK_SUBMITTED',
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH: 'PUSH',
  WEBHOOK: 'WEBHOOK',
  ALL: 'ALL',
  DISCOUNT: 'DISCOUNT',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  WALLET_EVENT: 'WALLET_EVENT',
  PREFERENCE_UPDATE: 'PREFERENCE_UPDATE',
  VENDOR_LINKING: 'VENDOR_LINKING'
};

exports.AgentStatus = exports.$Enums.AgentStatus = {
  AVAILABLE: 'AVAILABLE',
  ASSIGNED: 'ASSIGNED',
  PENDING: 'PENDING',
  SUSPENDED: 'SUSPENDED',
  DELIVERED: 'DELIVERED',
  BLOCKED: 'BLOCKED'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  INCOMPLETE: 'INCOMPLETE'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  VERIFIED: 'VERIFIED',
  NOT_VERIFIED: 'NOT_VERIFIED',
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.IssueType = exports.$Enums.IssueType = {
  DELIVERY: 'DELIVERY',
  PAYMENT: 'PAYMENT',
  SERVICE: 'SERVICE',
  DEFECTIVE_PRODUCT: 'DEFECTIVE_PRODUCT',
  WRONG_ITEM: 'WRONG_ITEM',
  DELIVERY_ISSUE: 'DELIVERY_ISSUE',
  GENERAL: 'GENERAL',
  PRODUCT: 'PRODUCT'
};

exports.ComplaintStatus = exports.$Enums.ComplaintStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED'
};

exports.IdentityVerificationType = exports.$Enums.IdentityVerificationType = {
  DRIVER_LICENSE: 'DRIVER_LICENSE',
  VOTER_CARD: 'VOTER_CARD',
  INTERNATIONAL_PASSPORT: 'INTERNATIONAL_PASSPORT',
  NIN: 'NIN',
  RESIDENCE_PERMIT: 'RESIDENCE_PERMIT'
};

exports.LicenseType = exports.$Enums.LicenseType = {
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  DRIVING_LICENSE: 'DRIVING_LICENSE',
  OPERATORS_LICENSE: 'OPERATORS_LICENSE',
  BUSINESS: 'BUSINESS',
  VEHICLE: 'VEHICLE',
  SAFETY: 'SAFETY',
  OPERATIONAL: 'OPERATIONAL'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  NIN: 'NIN',
  INTERNATIONAL_PASSPORT: 'INTERNATIONAL_PASSPORT',
  VOTER_CARD: 'VOTER_CARD',
  DRIVING_LICENCE: 'DRIVING_LICENCE',
  RESIDENCE_PERMIT: 'RESIDENCE_PERMIT',
  CAC: 'CAC',
  SAFETY_CERTIFICATE: 'SAFETY_CERTIFICATE',
  COMPLIANCE_CERTIFICATE: 'COMPLIANCE_CERTIFICATE',
  PLATE_NUMBER: 'PLATE_NUMBER',
  VEHICLE_ROAD_LICENSE: 'VEHICLE_ROAD_LICENSE'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  FAILED: 'FAILED',
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  PENDING_MANUAL: 'PENDING_MANUAL',
  PENDING_DELIVERY: 'PENDING_DELIVERY',
  CANCELLED: 'CANCELLED',
  REFUND: 'REFUND',
  AWAITING_APPROVAL: 'AWAITING_APPROVAL',
  REJECTED: 'REJECTED'
};

exports.ServiceOrderStatus = exports.$Enums.ServiceOrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  AGENT_ASSIGNED: 'AGENT_ASSIGNED',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  ORDER_RECEIVED: 'ORDER_RECEIVED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  MONNIFY: 'MONNIFY',
  CARD: 'CARD',
  TRANSFER: 'TRANSFER',
  WALLET: 'WALLET',
  PAY_ON_DELIVERY: 'PAY_ON_DELIVERY',
  VIRTUAL_ACCOUNT: 'VIRTUAL_ACCOUNT',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.AccessoryStatus = exports.$Enums.AccessoryStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  DELETED: 'DELETED'
};

exports.ServiceStatus = exports.$Enums.ServiceStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED',
  DISCONTINUED: 'DISCONTINUED',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  AGENT_ASSIGNED: 'AGENT_ASSIGNED',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  ORDER_RECEIVED: 'ORDER_RECEIVED',
  DISPUTED: 'DISPUTED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  DEDUCTION: 'DEDUCTION',
  REFUND: 'REFUND'
};

exports.VoucherType = exports.$Enums.VoucherType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED'
};

exports.FeedbackStatus = exports.$Enums.FeedbackStatus = {
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED',
  RESPONDED: 'RESPONDED'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.DisputeStatus = exports.$Enums.DisputeStatus = {
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED'
};

exports.WithdrawalStatus = exports.$Enums.WithdrawalStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.WithdrawalLimitType = exports.$Enums.WithdrawalLimitType = {
  DAILY_AMOUNT: 'DAILY_AMOUNT',
  DAILY_COUNT: 'DAILY_COUNT',
  AUTO_AMOUNT: 'AUTO_AMOUNT'
};

exports.LocationStatus = exports.$Enums.LocationStatus = {
  ENABLED: 'ENABLED',
  DISABLED: 'DISABLED',
  RESTRICTED: 'RESTRICTED'
};

exports.CrashStatus = exports.$Enums.CrashStatus = {
  PENDING: 'PENDING',
  UNDER_INVESTIGATION: 'UNDER_INVESTIGATION',
  PRIORITY: 'PRIORITY',
  RESOLVED: 'RESOLVED'
};

exports.AccountDeletionStatus = exports.$Enums.AccountDeletionStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.AppealStatus = exports.$Enums.AppealStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  Rating: 'Rating',
  User: 'User',
  Role: 'Role',
  Profile: 'Profile',
  Zone: 'Zone',
  Complaint: 'Complaint',
  Staff: 'Staff',
  NotificationPreference: 'NotificationPreference',
  IdentityVerification: 'IdentityVerification',
  IdentityVerificationStatusHistory: 'IdentityVerificationStatusHistory',
  License: 'License',
  Vehicle: 'Vehicle',
  VendorWalletConfig: 'VendorWalletConfig',
  ServiceType: 'ServiceType',
  ServiceOrder: 'ServiceOrder',
  ServiceOrderStatusHistory: 'ServiceOrderStatusHistory',
  BVNVerification: 'BVNVerification',
  Accessory: 'Accessory',
  Services: 'Services',
  ServiceReview: 'ServiceReview',
  BusinessVerification: 'BusinessVerification',
  ProductOrder: 'ProductOrder',
  ServiceVerification: 'ServiceVerification',
  AuditLog: 'AuditLog',
  WalletTransaction: 'WalletTransaction',
  Otp: 'Otp',
  Voucher: 'Voucher',
  VoucherUsage: 'VoucherUsage',
  Favorite: 'Favorite',
  Transfer: 'Transfer',
  CustomerAddress: 'CustomerAddress',
  SubAccount: 'SubAccount',
  Feedback: 'Feedback',
  OrderReview: 'OrderReview',
  Session: 'Session',
  PayOnDeliveryOrder: 'PayOnDeliveryOrder',
  Payment: 'Payment',
  Report: 'Report',
  Wallet: 'Wallet',
  PaymentProvider: 'PaymentProvider',
  Category: 'Category',
  ProductType: 'ProductType',
  Product: 'Product',
  Cart: 'Cart',
  ContactOption: 'ContactOption',
  CartItem: 'CartItem',
  Infraction: 'Infraction',
  OrderItem: 'OrderItem',
  PaymentConfig: 'PaymentConfig',
  Dispute: 'Dispute',
  Withdrawal: 'Withdrawal',
  WithdrawalLimit: 'WithdrawalLimit',
  QuicrifillWallet: 'QuicrifillWallet',
  QuicrifillWithdrawal: 'QuicrifillWithdrawal',
  AppInstallation: 'AppInstallation',
  Country: 'Country',
  State: 'State',
  City: 'City',
  Lga: 'Lga',
  VirtualAccount: 'VirtualAccount',
  FraudAlert: 'FraudAlert',
  EmailTemplate: 'EmailTemplate',
  RolePrivilege: 'RolePrivilege',
  CrashReport: 'CrashReport',
  AccountDeletionRequest: 'AccountDeletionRequest',
  AdminSettings: 'AdminSettings',
  Appeal: 'Appeal',
  WalletSettings: 'WalletSettings',
  BankCard: 'BankCard',
  OrderStatusHistory: 'OrderStatusHistory',
  WebhookAttempt: 'WebhookAttempt',
  EventType: 'EventType',
  SMSTemplate: 'SMSTemplate',
  NotificationLog: 'NotificationLog',
  PushTemplate: 'PushTemplate',
  Webhook: 'Webhook',
  EmailSettings: 'EmailSettings',
  SMSSettings: 'SMSSettings',
  ChurnInsight: 'ChurnInsight',
  RewardRule: 'RewardRule',
  Reward: 'Reward',
  EventTypeRole: 'EventTypeRole'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
